"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const vscode = require("vscode");
const vscode_1 = require("vscode");
const callWithTelemetryAndErrorHandling_1 = require("../callWithTelemetryAndErrorHandling");
const errors_1 = require("../errors");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const parseError_1 = require("../parseError");
const AzureParentTreeItem_1 = require("./AzureParentTreeItem");
const GenericTreeItem_1 = require("./GenericTreeItem");
const treeConstants_1 = require("./treeConstants");
const signInLabel = localize_1.localize('signInLabel', 'Sign in to Azure...');
const createAccountLabel = localize_1.localize('createAccountLabel', 'Create a Free Azure Account...');
const signInCommandId = 'azure-account.login';
const createAccountCommandId = 'azure-account.createAccount';
class AzureTreeDataProvider {
    constructor(subscriptionTreeItemType, loadMoreCommandId, rootTreeItems, testAccount) {
        this._onTreeItemCreateEmitter = new vscode_1.EventEmitter();
        this._onDidChangeTreeDataEmitter = new vscode_1.EventEmitter();
        this._disposables = [];
        this._subscriptionTreeItemType = subscriptionTreeItemType;
        this._loadMoreCommandId = loadMoreCommandId;
        // tslint:disable:strict-boolean-expressions
        this._customRootTreeItems = rootTreeItems || [];
        this._customRootTreeItems.forEach((ti) => ti.treeDataProvider = this);
        // Rather than expose 'AzureAccount' types in the index.ts contract, simply get it inside of this npm package
        const azureAccountExtension = vscode_1.extensions.getExtension('ms-vscode.azure-account');
        if (testAccount) {
            this._azureAccount = testAccount;
        }
        else if (!azureAccountExtension) {
            throw new Error(localize_1.localize('NoAccountExtensionError', 'The Azure Account Extension is required for the App Service tools.'));
        }
        else {
            this._azureAccount = azureAccountExtension.exports;
        }
        this._disposables.push(this._azureAccount.onFiltersChanged(() => __awaiter(this, void 0, void 0, function* () { return yield this.refresh(undefined, false); })));
        this._disposables.push(this._azureAccount.onStatusChanged((status) => __awaiter(this, void 0, void 0, function* () {
            // Ignore status change to 'LoggedIn' and wait for the 'onFiltersChanged' event to fire instead
            // (so that the tree stays in 'Loading...' state until the filters are actually ready)
            if (status !== 'LoggedIn') {
                yield this.refresh(undefined, false);
            }
        })));
    }
    dispose() {
        for (const disposable of this._disposables) {
            disposable.dispose();
        }
    }
    get onDidChangeTreeData() {
        return this._onDidChangeTreeDataEmitter.event;
    }
    get onTreeItemCreate() {
        return this._onTreeItemCreateEmitter.event;
    }
    getTreeItem(treeItem) {
        return {
            label: treeItem.effectiveLabel,
            id: treeItem.fullId,
            collapsibleState: treeItem instanceof AzureParentTreeItem_1.AzureParentTreeItem ? vscode_1.TreeItemCollapsibleState.Collapsed : undefined,
            contextValue: treeItem.contextValue,
            iconPath: treeItem.effectiveIconPath,
            command: treeItem.commandId ? {
                command: treeItem.commandId,
                title: '',
                arguments: [treeItem]
            } : undefined
        };
    }
    getChildren(treeItem) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // tslint:disable:no-var-self
                const thisTree = this;
                return yield callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandling('AzureTreeDataProvider.getChildren', function () {
                    return __awaiter(this, void 0, void 0, function* () {
                        const actionContext = this;
                        // tslint:enable:no-var-self
                        actionContext.suppressErrorDisplay = true;
                        actionContext.rethrowError = true;
                        let result;
                        if (treeItem !== undefined) {
                            actionContext.properties.contextValue = treeItem.contextValue;
                            const cachedChildren = yield treeItem.getCachedChildren();
                            const hasMoreChildren = treeItem.hasMoreChildrenImpl();
                            actionContext.properties.hasMoreChildren = String(hasMoreChildren);
                            result = treeItem.creatingTreeItems.concat(cachedChildren);
                            if (hasMoreChildren) {
                                result = result.concat(new GenericTreeItem_1.GenericTreeItem(treeItem, {
                                    label: treeConstants_1.loadMoreLabel,
                                    iconPath: {
                                        light: path.join(__filename, '..', '..', '..', '..', 'resources', 'light', 'refresh.svg'),
                                        dark: path.join(__filename, '..', '..', '..', '..', 'resources', 'dark', 'refresh.svg')
                                    },
                                    contextValue: 'azureLoadMore',
                                    commandId: thisTree._loadMoreCommandId
                                }));
                            }
                        }
                        else { // Root of tree
                            result = yield thisTree.populateRoots(actionContext);
                        }
                        this.measurements.childCount = result.length;
                        return result;
                    });
                });
            }
            catch (error) {
                return [new GenericTreeItem_1.GenericTreeItem(treeItem, {
                        label: localize_1.localize('errorTreeItem', 'Error: {0}', parseError_1.parseError(error).message),
                        contextValue: 'azureextensionui.error'
                    })];
            }
        });
    }
    refresh(treeItem, clearCache = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (clearCache) {
                if (!treeItem) {
                    this._subscriptionTreeItems = [];
                    this._customRootTreeItems.forEach((root) => {
                        if (root instanceof AzureParentTreeItem_1.AzureParentTreeItem) {
                            root.clearCache();
                        }
                    });
                }
                else {
                    if (treeItem.refreshImpl) {
                        yield treeItem.refreshImpl();
                    }
                    if (treeItem.refreshLabelImpl) {
                        yield treeItem.refreshLabelImpl();
                    }
                    if (treeItem instanceof AzureParentTreeItem_1.AzureParentTreeItem) {
                        treeItem.clearCache();
                    }
                }
            }
            this._onDidChangeTreeDataEmitter.fire(treeItem);
        });
    }
    loadMore(treeItem) {
        return __awaiter(this, void 0, void 0, function* () {
            if (treeItem.parent) {
                yield treeItem.parent.loadMoreChildren();
                this._onDidChangeTreeDataEmitter.fire(treeItem.parent);
            }
        });
    }
    showTreeItemPicker(expectedContextValues, startingTreeItem) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Array.isArray(expectedContextValues)) {
                expectedContextValues = [expectedContextValues];
            }
            // tslint:disable-next-line:strict-boolean-expressions
            let treeItem = startingTreeItem || (yield this.promptForRootTreeItem(expectedContextValues));
            while (!expectedContextValues.some((val) => treeItem.contextValue === val)) {
                if (treeItem instanceof AzureParentTreeItem_1.AzureParentTreeItem) {
                    treeItem = yield treeItem.pickChildTreeItem(expectedContextValues);
                }
                else {
                    throw new Error(localize_1.localize('noResourcesError', 'No matching resources found.'));
                }
            }
            return treeItem;
        });
    }
    findTreeItem(fullId) {
        return __awaiter(this, void 0, void 0, function* () {
            let treeItems = yield this.getChildren();
            let foundAncestor;
            do {
                foundAncestor = false;
                for (const treeItem of treeItems) {
                    if (treeItem.fullId === fullId) {
                        return treeItem;
                    }
                    else if (fullId.startsWith(`${treeItem.fullId}/`) && treeItem instanceof AzureParentTreeItem_1.AzureParentTreeItem) {
                        // Append '/' to 'treeItem.fullId' when checking 'startsWith' to ensure its actually an ancestor, rather than a treeItem at the same level that _happens_ to start with the same id
                        // For example, two databases named 'test' and 'test1' as described in this issue: https://github.com/Microsoft/vscode-cosmosdb/issues/488
                        treeItems = yield treeItem.getCachedChildren();
                        foundAncestor = true;
                        break;
                    }
                }
            } while (foundAncestor);
            return undefined;
        });
    }
    getParent(element) {
        return __awaiter(this, void 0, void 0, function* () {
            return element.parent;
        });
    }
    promptForRootTreeItem(expectedContextValues) {
        return __awaiter(this, void 0, void 0, function* () {
            let picks;
            const initialStatus = this._azureAccount.status;
            if (initialStatus === 'LoggedIn') {
                picks = (yield this.ensureRootTreeItems()).map((ti) => {
                    return {
                        data: ti,
                        label: ti.label,
                        description: ti.root.subscriptionId
                    };
                });
            }
            else if (initialStatus === 'LoggingIn' || initialStatus === 'Initializing') {
                yield vscode.window.withProgress({
                    location: vscode.ProgressLocation.Notification,
                    title: localize_1.localize('waitingForAzureSignin', 'Waiting for Azure sign-in')
                }, (_progress) => __awaiter(this, void 0, void 0, function* () {
                    yield this._azureAccount.waitForSubscriptions();
                }));
                return yield this.promptForRootTreeItem(expectedContextValues);
            }
            else {
                picks = [
                    { label: signInLabel, description: '', data: signInCommandId },
                    { label: createAccountLabel, description: '', data: createAccountCommandId }
                ];
            }
            picks = picks.concat(this._customRootTreeItems
                .filter((ti) => ti.includeInTreePicker(expectedContextValues))
                .map((ti) => { return { data: ti, description: '', label: ti.label }; }));
            const options = { placeHolder: localize_1.localize('selectSubscription', 'Select a Subscription') };
            const result = picks.length === 1 ? picks[0].data : (yield extensionVariables_1.ext.ui.showQuickPick(picks, options)).data;
            if (typeof result === 'string') {
                yield vscode.commands.executeCommand(result);
                yield this._azureAccount.waitForFilters();
                if (this._azureAccount.status === 'LoggedIn') {
                    yield this.ensureRootTreeItems();
                    return yield this.promptForRootTreeItem(expectedContextValues);
                }
                else {
                    throw new errors_1.UserCancelledError();
                }
            }
            else {
                return result;
            }
        });
    }
    ensureRootTreeItems() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._subscriptionTreeItems) {
                yield this.getChildren();
            }
            // tslint:disable-next-line:no-non-null-assertion
            return this._subscriptionTreeItems;
        });
    }
    populateRoots(actionContext) {
        return __awaiter(this, void 0, void 0, function* () {
            actionContext.properties.isActivationEvent = 'true';
            actionContext.properties.contextValue = 'root';
            actionContext.properties.accountStatus = this._azureAccount.status;
            let roots;
            const existingSubscriptions = this._subscriptionTreeItems ? this._subscriptionTreeItems : [];
            this._subscriptionTreeItems = [];
            let commandLabel;
            if (this._azureAccount.status === 'Initializing' || this._azureAccount.status === 'LoggingIn') {
                roots = [new GenericTreeItem_1.GenericTreeItem(undefined, {
                        label: this._azureAccount.status === 'Initializing' ? localize_1.localize('loadingTreeItem', 'Loading...') : localize_1.localize('signingIn', 'Waiting for Azure sign-in...'),
                        commandId: signInCommandId,
                        contextValue: 'azureCommand',
                        id: signInCommandId,
                        iconPath: {
                            light: path.join(__filename, '..', '..', '..', '..', 'resources', 'light', 'Loading.svg'),
                            dark: path.join(__filename, '..', '..', '..', '..', 'resources', 'dark', 'Loading.svg')
                        }
                    })];
            }
            else if (this._azureAccount.status === 'LoggedOut') {
                roots = [
                    new GenericTreeItem_1.GenericTreeItem(undefined, { label: signInLabel, commandId: signInCommandId, contextValue: 'azureCommand', id: signInCommandId }),
                    new GenericTreeItem_1.GenericTreeItem(undefined, { label: createAccountLabel, commandId: createAccountCommandId, contextValue: 'azureCommand', id: createAccountCommandId })
                ];
            }
            else if (this._azureAccount.filters.length === 0) {
                commandLabel = localize_1.localize('noSubscriptions', 'Select Subscriptions...');
                roots = [new GenericTreeItem_1.GenericTreeItem(undefined, { label: commandLabel, commandId: 'azure-account.selectSubscriptions', contextValue: 'azureCommand', id: 'azure-account.selectSubscriptions' })];
            }
            else {
                this._subscriptionTreeItems = this._azureAccount.filters.map((filter) => {
                    if (filter.subscription.id === undefined || filter.subscription.displayName === undefined || filter.subscription.subscriptionId === undefined) {
                        throw new errors_1.ArgumentError(filter);
                    }
                    else {
                        const existingTreeItem = existingSubscriptions.find((ti) => ti.id === filter.subscription.id);
                        if (existingTreeItem) {
                            // Return existing treeItem (which might have many 'cached' tree items underneath it) rather than creating a brand new tree item every time
                            return existingTreeItem;
                        }
                        else {
                            // filter.subscription.id is the The fully qualified ID of the subscription (For example, /subscriptions/00000000-0000-0000-0000-000000000000) and should be used as the tree item's id for the purposes of OpenInPortal
                            // filter.subscription.subscriptionId is just the guid and is used in all other cases when creating clients for managing Azure resources
                            const newItem = new this._subscriptionTreeItemType({
                                credentials: filter.session.credentials,
                                subscriptionDisplayName: filter.subscription.displayName,
                                subscriptionId: filter.subscription.subscriptionId,
                                subscriptionPath: filter.subscription.id,
                                tenantId: filter.session.tenantId,
                                userId: filter.session.userId,
                                environment: filter.session.environment
                            });
                            newItem.treeDataProvider = this;
                            return newItem;
                        }
                    }
                });
                roots = this._subscriptionTreeItems;
            }
            return roots.concat(this._customRootTreeItems);
        });
    }
}
exports.AzureTreeDataProvider = AzureTreeDataProvider;
//# sourceMappingURL=AzureTreeDataProvider.js.map