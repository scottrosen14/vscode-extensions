"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const AzureTreeItem_1 = require("./AzureTreeItem");
const GenericTreeItem_1 = require("./GenericTreeItem");
const treeConstants_1 = require("./treeConstants");
class AzureParentTreeItem extends AzureTreeItem_1.AzureTreeItem {
    constructor() {
        super(...arguments);
        //#endregion
        this._cachedChildren = [];
        this._creatingTreeItems = [];
        this._clearCache = true;
    }
    getCachedChildren() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._clearCache) {
                this._initChildrenTask = this.loadMoreChildren();
            }
            if (this._initChildrenTask) {
                yield this._initChildrenTask;
            }
            return this._cachedChildren;
        });
    }
    get creatingTreeItems() {
        return this._creatingTreeItems;
    }
    //#endregion
    clearCache() {
        this._clearCache = true;
    }
    createChild(userOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.createChildImpl) {
                let creatingTreeItem;
                try {
                    const newTreeItem = yield this.createChildImpl((label) => {
                        creatingTreeItem = new GenericTreeItem_1.GenericTreeItem(this, {
                            label: localize_1.localize('creatingLabel', 'Creating {0}...', label),
                            contextValue: `azureCreating${label}`,
                            iconPath: treeConstants_1.loadingIconPath
                        });
                        this._creatingTreeItems.push(creatingTreeItem);
                        //tslint:disable-next-line:no-floating-promises
                        this.treeDataProvider.refresh(this, false);
                    }, userOptions);
                    yield this.addChildToCache(newTreeItem);
                    this.treeDataProvider._onTreeItemCreateEmitter.fire(newTreeItem);
                    return newTreeItem;
                }
                finally {
                    if (creatingTreeItem) {
                        this._creatingTreeItems.splice(this._creatingTreeItems.indexOf(creatingTreeItem), 1);
                        yield this.treeDataProvider.refresh(this, false);
                    }
                }
            }
            else {
                throw new errors_1.NotImplementedError('createChildImpl', this);
            }
        });
    }
    pickChildTreeItem(expectedContextValues) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.pickTreeItemImpl) {
                const children = yield this.getCachedChildren();
                for (const val of expectedContextValues) {
                    const pickedItem = this.pickTreeItemImpl(val);
                    if (pickedItem) {
                        const child = children.find((ti) => ti.fullId === pickedItem.fullId);
                        if (child) {
                            return child;
                        }
                    }
                }
            }
            const options = {
                placeHolder: localize_1.localize('selectTreeItem', 'Select {0}', this.childTypeLabel)
            };
            const getTreeItem = (yield extensionVariables_1.ext.ui.showQuickPick(this.getQuickPicks(expectedContextValues), options)).data;
            return yield getTreeItem();
        });
    }
    addChildToCache(childToAdd) {
        return __awaiter(this, void 0, void 0, function* () {
            // set index to the last element by default
            let index = this._cachedChildren.length;
            // tslint:disable-next-line:no-increment-decrement
            for (let i = 0; i < this._cachedChildren.length; i++) {
                if (childToAdd.label.localeCompare(this._cachedChildren[i].label) < 1) {
                    index = i;
                    break;
                }
            }
            this._cachedChildren.splice(index, 0, childToAdd);
            yield this.treeDataProvider.refresh(this, false);
        });
    }
    removeChildFromCache(childToRemove) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = this._cachedChildren.indexOf(childToRemove);
            if (index !== -1) {
                this._cachedChildren.splice(index, 1);
                yield this.treeDataProvider.refresh(this, false);
            }
        });
    }
    loadMoreChildren() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._loadMoreChildrenTask) {
                yield this._loadMoreChildrenTask;
            }
            else {
                this._loadMoreChildrenTask = this.loadMoreChildrenInternal();
                try {
                    yield this._loadMoreChildrenTask;
                }
                finally {
                    this._loadMoreChildrenTask = undefined;
                }
            }
        });
    }
    loadMoreChildrenInternal() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._clearCache) {
                this._cachedChildren = [];
            }
            const sortCallback = this.compareChildrenImpl
                ? this.compareChildrenImpl
                : (ti1, ti2) => ti1.label.localeCompare(ti2.label);
            const newTreeItems = yield this.loadMoreChildrenImpl(this._clearCache);
            this._cachedChildren = this._cachedChildren.concat(newTreeItems).sort(sortCallback);
            this._clearCache = false;
        });
    }
    getQuickPicks(expectedContextValues) {
        return __awaiter(this, void 0, void 0, function* () {
            let children = yield this.getCachedChildren();
            children = children.filter((ti) => ti.includeInTreePicker(expectedContextValues));
            const picks = children.map((ti) => {
                return {
                    label: ti.label,
                    description: ti.description,
                    id: ti.fullId,
                    data: () => __awaiter(this, void 0, void 0, function* () { return yield Promise.resolve(ti); })
                };
            });
            if (this.createChildImpl && this.childTypeLabel) {
                picks.unshift({
                    label: localize_1.localize('treePickerCreateNew', '$(plus) Create New {0}', this.childTypeLabel),
                    description: '',
                    data: () => __awaiter(this, void 0, void 0, function* () { return yield this.createChild(); })
                });
            }
            if (this.hasMoreChildrenImpl()) {
                picks.push({
                    label: `$(sync) ${treeConstants_1.loadMoreLabel}`,
                    description: '',
                    data: () => __awaiter(this, void 0, void 0, function* () {
                        yield this.loadMoreChildren();
                        yield this.treeDataProvider.refresh(this, false);
                        return this;
                    })
                });
            }
            return picks;
        });
    }
}
exports.AzureParentTreeItem = AzureParentTreeItem;
//# sourceMappingURL=AzureParentTreeItem.js.map